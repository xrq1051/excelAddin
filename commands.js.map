{"version":3,"file":"commands.js","mappings":"YACA,IAAIA,EAAsB,GCD1BA,EAAoBC,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,GACd,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,QALjB,GCSxBC,OAAOC,SAAQ,eAyDf,IAAMP,EATmB,oBAATQ,KACVA,KACkB,oBAAXH,OACPA,YACkB,IAAXI,EAAAA,EACPA,EAAAA,OACAC,EAMNV,EAAEW,OApDF,SAAgBC,GACd,IAAMC,EAAU,CACdC,KAAMR,OAAOS,aAAaC,4BAA4BC,qBACtDJ,QAAS,oBACTK,KAAM,aACNC,YAAY,GAIdb,OAAOc,QAAQC,QAAQC,KAAKC,qBAAqBC,aAAa,SAAUX,GAGxED,EAAMa,aAyCRzB,EAAE0B,iBAtCF,SAA0BC,GACxBC,MAAMC,KAAI,SAAUT,GAClB,IAAIU,EAAQV,EAAQW,SAASC,WAAWC,qBAGxC,OAFAH,EAAMI,KAAK,wBAEJd,EACJe,OACAC,MAAK,WACAN,EAAMO,WAAWC,UACnBR,EAAMO,WAAWE,YAEjBT,EAAMO,WAAWG,aAGpBJ,KAAKhB,EAAQe,SACfM,OAAM,SAAUC,GACjBC,QAAQC,IAAI,UAAYF,GACpBA,aAAiBG,gBAAgBC,OACnCH,QAAQC,IAAI,eAAiBG,KAAKC,UAAUN,EAAMO,eAGtDtB,EAAKF,a","sources":["webpack:///webpack/bootstrap?","webpack:///webpack/runtime/global?","webpack:///./src/commands/commands.js?"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","/* eslint-disable no-unreachable */\n/* eslint-disable no-undef */\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global global, Office, self, window */\n\nOffice.onReady(() => {\n  // If needed, Office.js is ready to be called\n});\n\n/**\n * Shows a notification when the add-in command is executed.\n * @param event {Office.AddinCommands.Event}\n */\nfunction action(event) {\n  const message = {\n    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n    message: \"Performed action.\",\n    icon: \"Icon.80x80\",\n    persistent: true,\n  };\n\n  // Show a notification message\n  Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", message);\n\n  // Be sure to indicate when the add-in command function is complete\n  event.completed();\n}\n\nfunction toggleProtection(args) {\n  Excel.run(function (context) {\n    var sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.load(\"protection/protected\");\n\n    return context\n      .sync()\n      .then(function () {\n        if (sheet.protection.protected) {\n          sheet.protection.unprotect();\n        } else {\n          sheet.protection.protect();\n        }\n      })\n      .then(context.sync);\n  }).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n      console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n  });\n  args.completed();\n}\n\nfunction getGlobal() {\n  return typeof self !== \"undefined\"\n    ? self\n    : typeof window !== \"undefined\"\n    ? window\n    : typeof global !== \"undefined\"\n    ? global\n    : undefined;\n}\n\nconst g = getGlobal();\n\n// The add-in command functions need to be available in global scope\ng.action = action;\ng.toggleProtection = toggleProtection;\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","Office","onReady","self","global","undefined","action","event","message","type","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","persistent","context","mailbox","item","notificationMessages","replaceAsync","completed","toggleProtection","args","Excel","run","sheet","workbook","worksheets","getActiveWorksheet","load","sync","then","protection","protected","unprotect","protect","catch","error","console","log","OfficeExtension","Error","JSON","stringify","debugInfo"],"sourceRoot":""}